---

layout: project
title: CSC8503 Average Heist of the Golden Goose
thumbnail: \assets\goose.png
videolink: youtube.com
shortdescription: Physics, AI and Networking project created using C++.
permalink: /CSC8503
priority: 2
---
<h2>Grade: 100%</h2>
<h1>Summary</h1> 
CSC8503 was a module focused on programming physics, networking and AI into a game in C++. The main features of my game were:
<h3>Physics</h3> 
- Collisions for Sphere-Sphere , Sphere-AABB, Sphere-OBB, AABB-AABB, Capsule-Sphere, Capsule-AABB 
- Ray collisions for all types. 
- Physics materials with changeable coefficient of restitution, vertical damping and horizontal damping. 
- Collision layers so objects can ignore collisions with each other. 
- Raycast collision layers. 
- Quad tree broad phase for faster processing. 
- Static and dynamic objects, where collisions between static objects are not considered. 
- Sleeping and awake objects, where collisions between sleeping objects are ignored, and static objects are also ignored. 
- A grappling hook that uses raycasts to allow the player to grapple towards static objects, and pull dynamic objects towards them. 
- Trigger volumes used for a jump pad, and used to allow the player to pick up and throw objects when the trigger is over a dynamic object. 

<h3>AI </h3>
- A state machine enemy that will patrol between points, run towards the player if it can see them, shoot the player if it is close enough, pathfind to get to the player if it cannot see them, and then return to patrolling if the player hides for long enough. 
- Pathfinding that can be executed multiple times by the enemy to navigate the world. 
- A simple behaviour tree powered enemy that stays near the treasure and provides resistance when it detects that the player is trying to steal the treasure, until it eventually gives up. 
- Both of these enemies work in single player and in multiplayer, where they are controlled by the server in multiplayer. 
- Pushdown automata used for the main menu, including the ability to pause the game in singleplayer. 

<h3>Networking </h3>
- The game can be started as a client or a server. 
- When the player joins a server, the server sends a message to all players and the correct number of player objects are added. 
- Player inputs are sent to the server and processed. 
- The server executes all physics, and the results are sent to the clients. 
- Game information such as player health and points are sent from the server to the clients when events occur that change those values. 

<h3>Other </h3>
- Simple component system for easily adding functionality to game objects. This is not a full Entity Component System but for the purposes of the coursework it is sufficient. 
<h1>Extensions of the tutorials</h1>
Similarly to CSC8502, some of this was covered in tutorial content, and the main extensions were:
- Various physics engine improvements, with physics materials, static and dynamic objects, object sleeping, collision layers and trigger volumes.
- A complete state machine based enemy, which uses pathfinding to chase the player and attack them.
- Basic implementation of networking, to a degree that was not covered in the tutorials.

<h1>Physics</h1>
The codebase for the coursework included some physics code already, and following the tutorial content led to working Axis Aligned Bounding Box, plane, and sphere collisions, with raycast checks for all of these also implemented. The missing collisions were Oriented Bounding Boxes against AABBs, spheres and capsules, and capsule-capsule collisions.

The implementation of capsules was very minimal to start off with, and I managed to implement AABB-Capsule, Sphere-Capsule, OBB-Capsule and Sphere-OBB, but not OBB-Capsule or Capsule-Capsule.

There were some physics features that I was aware were standard, but were missing from the engine. I knew about these features mainly because of their inclusion in the Unity game engine, and I decided to implement them myself, to the best of my knowlege.

For Physics materials, I made a simple struct which stored coefficient of restitution, and a few different damping values for extra control over how physics objects behaved.
```cpp
struct PhysicsMaterial
{
	float e;
	float linearDampHorizontal;
	float linearDampVertical;
	float angularDamp;
};
```
<h6>PhysicsMaterial struct.</h6>
PhysicsObjects in the game store a pointer to a PhysicsMaterial, so when updating the game's physics, these values can be retrieved and used to modify the result.
My main reason for splitting linear damping into vertical and horizontal was to fine tune the player's controls: by damping more horizontally, the player comes to a stop faster when moving, resulting in controls that feel less slippery. Damping vertical velocity seperately means I could tweak the player's movement without altering how their jump performed.

<h2>Picking Up Objects</h2>
In my game, I wanted the player to be able to pick up objects and carry them around, to allow for physics puzzles in my game. This mechanic was very much inspired by the Source engine, and the games made in it such as Half Life 2 and Garry's mod.
To allow the player to pick up objects, there needed to be a way to detect what objects the player could pick up. There were 3 ways I thought to do this:
- Raycast from the camera and if the ray hits an object that can be picked up, and the player is close enough, then pick it up. This would make picking up objects very precise and might be frustrating.
- Get all of the objects that are close to the player, and if one is close enough, then pick it up. This could lead the player to pick up objects they did not want to pick up.
- Have a sphere collider a fixed distance away from the player that moves as the player looks around, and if this is colliding with an object that can be picked up, then pick it up.

I opted to go for the third option, as this was the most sensible and would feel the best for the player.
```cpp
Vector3 ObjectPickupComponent::CalculateLookDirection() {
    float camYaw = camera->GetYaw();
    float camPitch = camera->GetPitch();
	float normYaw = camYaw > 180 ? camYaw - 360 : camYaw; //get yaw between -180 and 180
	normYaw = normYaw * DEGREES_TO_RAD;

	//convert from pitch/yaw to directions
	float xDir = cos(normYaw) * cos(camPitch * DEGREES_TO_RAD);
	float yDir = sin(camPitch * DEGREES_TO_RAD);
	float zDir = sin(-normYaw) * cos(camPitch * DEGREES_TO_RAD);

	return Vector3(zDir, yDir, -xDir);
}
```
<h6>Converting from camera pitch and yaw values into a Vector3 direction. The trigger is then offset by a multiple of this vector.</h6>

To make an object "picked up", a constant force is applied towards the centre of this pickup trigger, which is proportional to distance. Through a simple Hooke's Law calculation, it was relatively easy to make picking up objects feel good for the player. I wanted it to still feel slightly springy, to convey a feeling of weight in the objects. After some tweaking, I decided on another improvement: changing an object's PhysicsMaterial while picking it up, and swapping it back afterwards. The reason I did this was because I wanted objects that were picked up to move faster but slow down much quicker, so I increased the force being applied but also increased the damping in a new PhysicsMaterial.

![image](\assets\gooseBall.gif)
<h6>The player can pick up and throw objects.</h6>

Another physics-based mechanic I added to the game was a grapple hook. For this, I wanted it to behave differently depending on if the player grappled a static wall or a dynamic object. If they grapple a wall, they should be pulled towards it, if they grapple an object, the object should be pulled to them.
To do this, I raycast from the player and check the type of the object hit. If its static, then the point the raycast hit is used as the anchor point and the player constantly applies a force towards it. If it is dynamic, a constant force is applied to the centre of the object towards the player.


![image](\assets\goosePull.gif)
<h6>The player can grapple objects towards them.</h6>

<h1>AI</h1>
For the AI of the game, I decided that I should add only 2 enemies: one using a state machine, one using behaviour trees. Both of these techniques were covered in the tutorial content, but not to a degree that resulted in an enemy.
For my state machine enemy, I wanted it to behave like a very simple, FPS style enemy: patrol between points until it sees the player - > chase the player until they are close enough - > shoot the player.
![image](\assets\gooseState.png)
<h6>State Machine diagram for the enemy.</h6>
The enemy cannot be killed as they have no health and the player has no attack: they are simply an obsticle to avoid. I could have added this ability, but I wanted the enemy to always have presence.
A key part to make this enemy function was to integrate pathfinding into the state machine: if the enemy is chasing the player but cannot see them, then they must navigate around walls in the level to see them.
Thankfully, my level was all block based, and as such setting nodes in the graph for pathfinding was very easy. Any space that did not have a block was traversable by the enemy. The enemy only performs an A* search if the player has moved at least 1 block away from the enemy's current goal node, as only then could the player has possibly moved to a new area.

![image](\assets\gooseEnemy.gif)
<h6>State machine enemy chasing and shooting the player.</h6>

The behaviour tree enemy is not really an enemy: they are even more of an obsticle than the state machine enemy. They have these behaviours: hover in the air, pull back the treasure, or return to their start point.
![image](\assets\gooseBehav.png)
<h6>The behaviour tree uses a combination of selectors and sequences.</h6>
By having an isTreasureStolen node as the first action in the left sequence, the whole sequence will fail if the treasure has not been stolen, and therefore the root selector will perform the right subtree.

These enemies are very simplistic, but still provided further interest and challenge for the player.


<h1>Networking</h1>
The networking part of this project was definitely the messiest part, as I created the rest of the game without networking in mind, thinking I would not have the time to get round to it. However, I decided to give it a go anyway, and although it resulted in a codebase I am not very happy with, the result was functional and playable between multiple instances on the same localhost.
So far in the coursework, I just had the singleplayer game handle all processing, including physics and AI. However, when moving to networking, I decided to delagate these things to the server instead, as this is the typical approach to make sure the objects on all clients match up in a real time game.
For networking, I had a few different types of packets which were used between clients and servers:
- FullPacket. This sends the data of an object in that game that should have its physics networked (position and orientation). The server sends these to clients after processing physics.
- ClientPacket. This is sent from the client to the server, and contains inputs from the client. This is in the form of a `bool[8]`, with each element representinf if a button is pressed or not.
- GameInfoPacket. This is sent from server to client and contains health, points and collectables of a specific player.
- PlayerConnectPacket. This is a packet that is sent from client to server when the client joins the server, so the server knows a player has successfully connected.
- PlayerConnectServerAckPacket. This packet is sent from server to all clients once the server receives a PlayerConnectPacket. It lets all the clients know how many players are currently connected, so the newly joined client can create the correct number of player objects, and the old clients can create a new player and assign the correct networkID.

```cpp
struct ClientPacket : public GamePacket {
	int		objectID;
	bool	buttonstates[8];
	//buttonstates[0] = W
	//buttonstates[1] = A
	//buttonstates[2] = S
	//buttonstates[3] = D
	//buttonstates[4] = Space
	//buttonstates[5] = Right Click
	//buttonstates[6] = Left Click
	//buttonstates[7] = E
	float camPitch;
	float camYaw;

	ClientPacket() {
		type = Client_State;
		size = sizeof(ClientPacket) - sizeof(GamePacket);
	}
};
```
<h6>ClientPacket, that sends inputs from client to server.</h6>

I store the player inputs in a map structure, with a key of the networkID of the player and the values being a `bool[8]`. This way, each client's inputs from the last packet are stored and can be used in game functionality.
```cpp
void TutorialGame::ProcessClientInput(ClientPacket* p) {

	playerInputsMap[p->objectID][0] = p->buttonstates[0];//w
	playerInputsMap[p->objectID][1] = p->buttonstates[1];//a
	playerInputsMap[p->objectID][2] = p->buttonstates[2];//s
	playerInputsMap[p->objectID][3] = p->buttonstates[3];//d
	playerInputsMap[p->objectID][4] = p->buttonstates[4];//space
	playerInputsMap[p->objectID][5] = p->buttonstates[5];//left click
	playerInputsMap[p->objectID][6] = p->buttonstates[6];//right click
	playerInputsMap[p->objectID][7] = p->buttonstates[7];//e

	playerCameraMap[p->objectID].pitch = p->camPitch;
	playerCameraMap[p->objectID].yaw = p->camYaw;
}
```
<h6>Method to process the data from a client packet. playerInputsMap is used to move the player objects.</h6>

With these packets, most of my game functioned the same in multiplayer. There were some missing features however, as if an object is destroyed in the server (such as a door being opened), there is no packet to tell the clients to delete it, and therefore the clients still render the object. I created a DisableObjectPacket, but did not have time to implement the sending and receiving of it.

![image](\assets\gooseMult.gif)
<h6>Two clients in the same game.</h6>


<h1>Simple Components</h1>
The initial codebase for the project was not very easy to work with when it came to adding functionality to objects in the game, so I added my own component system. This was a very naive implementation, and was in no way a true Entity Component System as there was no notion of contiguous memory or an entity-component registry. I simply added a new base class, Component.h, with some easy to understand virtual functions:
``` cpp
class Component
{
public:
	Component() { };
	~Component() {};
	Component(GameObject* gameObject) { this->gameObject = gameObject;}
	virtual void Update(float dt) {};
	virtual void PhysicsUpdate(float dt) {};
	virtual void Start(GameWorld* gw) {};
	virtual void OnCollisionBegin(GameObject* otherObject) {};
	virtual void OnCollisionStay(GameObject* otherObject) {};
	virtual void OnCollisionEnd(GameObject* otherObject) {};

	protected:
		GameObject* gameObject;
	};
```
The heavy use of virtual functions is obviously not the most efficient approach to object functionality, due to the added vtable lookups, but for the purposes of the coursework it provided a very easy way to make objects in my game do things. The methods of the class are heavily inspired by Unity's MonoBehaviour methods, and I wanted them to be used in basically the exact same way: Update() called every frame, PhysicsUpdate() called every time physics was updated, and so on.

To call these functions, the GameObject class was extended to store a vector of Components. GameObject will iterate through each component and call the appropriate virtual function whenever it is necessary, and as such, each component gets a chance to call their code.
Making new functionality involved subclassing Component and overriding the necessary methods, then instantiating it and linking it to a GameObject when the GameObject was created.


<h1>What went well</h1>
I am quite happy with how my player movement felt, as it behaved very much like how you would expect a first person controller in a normal video game to. My pickup mechanic was also good and was close to how I envisioned it when I thought of the idea.
Although my networking was not very impressive and was missing many features, I am still very happy with the extent that it functioned, considering I implemented it in only a few days. I am especially happy with the fact I managed to handle players joining the game for all current players.

<h1>What I would improve</h1>
My weakest aspect in this module was definitely my implementation of collision detection for the various volumes. My lack of OBB collision detection makes the physics feel very simple, even though it was not required for the game to be playable. Having OBB-Capsule at least allows for the player to run up ramps which is important.
Another big area that my physics was lacking was no friction, meaning when objects collided with eachother, they would not rotate. This is something I would have really liked to implement, but I did not want to spend too much time on the physics as, at the time, I still had the AI and networking parts of the coursework to implement.

The gameplay loop was also very weak and simple.

The networked aspect of the game was functional only on a local host, though there was no expectation of the coursework to run across multiple machines. Furthermore, my networking was done using full packets only, instead of the much more efficient delta packets. This was purely a time constraint as I could have figured out how to implement both full and delta packets given a few more days.