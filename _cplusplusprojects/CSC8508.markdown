---

layout: project
title: Hellrunners - CSC8508 Team Project
thumbnail: \assets\greenbulon.png
videolink: TBA
shortdescription: C++ 8 week team project.
permalink: /CSC8508
priority: 1
---
<h2>Grade: TBD/h2>
<h1>Summary</h1>
CSC8508 was my team project module, to create a game in C++ in 8 weeks.
My main contributions to the project were:
- Simple component system (created in my previous coursework, CSC8503)
- Physics broadphase rework using Sort & Sweep.
- Extra physics system features such as collision layers and physics materials.
- All animation code including a simple animation transition system. This includes networking animations such that the correct animation is shown for all clients.
- Integrating deferred rendering.
- Level select in the lobby menu, networked across clients. This involved interfacing with Joe's LUA UI system.
- Level transitions including a countdown and waiting for all players to finish. This includes networking level loading such that the server and clients load the same levels and begin at the same time. Also involved reworking other's code to function between levels.
- Made sure memory management was correct when transitioning levels.
- Editor tools in Unity such as visualisers for moving platforms. I also interfaced and extended my teammates level exporter tool.
- Gameplay changes involving moving platforms and tweaks to movement including coyote time.
- Networking various features such as player's speed lines.
- Different textures per player so each player has a different look.
And more minor changes and tweaks.

Since I was on the MCOMP course, for the first 4 weeks of the module, I also had a non-games module to study, meaning my contributions in the first half were lower than I would have liked.

<h1>Physics changes</h1>

<h1>Animation System</h1>

<h1>What went well</h1>

<h1>Code Rework & Game Flow</h1>

<h1>Level Select</h1>

<h1>Moving platforms</h1>


<h1>Unity Tools</h1>
For the project, we decided to use the Unity editor as a level creation tool: we build the level in Unity, placing blocks and objects, then export the level to JSON which will be read by the C++ game.
I was not responsible for the initial creation of the JSON exporter code, as this was mostly done by Idhant (LINK HERE). I did however expand upon it, adding extra types of game objects and level information, such as moving platforms and medal values specific to each level.
When adding moving platforms in the editor and setting their values, it was hard to imagine how the platform would actually move in the game. I therefore decided to add a visualiser tool to the editor which would show how the platform will move, so the user can tweak and adjust the platforms without having to export the level and load it into the game.

To do this, I utilised Unity's editor gizmo tools to draw the mesh of the object in a transparent form, that will move as it would in the game:

INSERT IMAGE

The code to move the platform over time in Unity is the exact same as the C++ code, albeit with some language function translations. The platform visualisations therefore behave exactly as they would in the actual game.




<h1>What went well</h1>


<h1>What I would improve</h1>


<h1>Code Samples</h1>

